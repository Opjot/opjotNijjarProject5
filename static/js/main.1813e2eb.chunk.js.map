{"version":3,"sources":["firebaseApp.js","components/Header.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","header","className","Component","Footer","App","handleChange","event","setState","userInput","target","value","handleClick","e","preventDefault","state","alert","database","ref","push","removeName","nameId","child","remove","shuffle","arr","i","length","indexSwap","Math","floor","random","currentName","nameSwap","randomize","teamOnePlaceholder","teamTwoPlaceholder","copyOfNamesArray","namesArray","map","name","index","teamOne","teamTwo","isHidden","on","response","newState","data","val","key","Header","action","htmlFor","type","id","onChange","this","onClick","nameObject","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1813e2eb.chunk.js","sourcesContent":["\nimport firebase from 'firebase'\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAwnl3RtvbCeyQCc-wVAlrqhJ1AlhYDTOo\",\n    authDomain: \"opjot-nijjar-project-5.firebaseapp.com\",\n    databaseURL: \"https://opjot-nijjar-project-5.firebaseio.com\",\n    projectId: \"opjot-nijjar-project-5\",\n    storageBucket: \"opjot-nijjar-project-5.appspot.com\",\n    messagingSenderId: \"468885992587\",\n    appId: \"1:468885992587:web:2939484acfdd1ca542508e\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  \n  export default firebase;","import React, { Component } from 'react'\n\nclass header extends Component{\n    render(){\n        return(\n            <header>\n                <h1>Teamify</h1>\n                <div className=\"instructions\">\n                    <h2>Instruction</h2>\n                    <p>1. Insert names of all players into the text box one by one.</p>\n                    <p>2. click randomize!</p>\n                    <p>3. You will receive two randomly generated teams.</p>\n                </div>\n            </header>\n        )\n    }\n}\nexport default header ","import React, { Component } from 'react';\n\nclass Footer extends Component{\n    render(){\n        return(\n            <footer>\n                <p>Opjot S. Nijjar &#9400; Copyright 2020</p>\n            </footer>\n        )\n    }\n}\n\nexport default Footer\n","import React, { Component } from 'react';\nimport './App.scss';\n\nimport firebase from './firebaseApp'\nimport  Header from './components/Header'\n// import Main from './components/Main.js'\nimport Footer from './components/Footer'\n\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      namesArray:[],\n      userInput:'',\n      teamOne:[],\n      teamTwo:[],\n      random:null,\n      isHidden: false,\n    }\n  }\n\n  componentDidMount(){\n    const dbRef = firebase.database().ref();\n      dbRef.on('value', (response) => {\n        const newState = [];\n        const data = response.val();\n        for (let key in data) {\n          newState.push({key: key, name: data[key]});\n        }\n\n        this.setState({\n          namesArray:newState\n        })\n    });\n  }\n\n  handleChange = (event) => {\n    this.setState({userInput: event.target.value})\n  }\n\n  handleClick = (e) => {\n    e.preventDefault();\n    if(this.state.userInput === \"\"){\n      alert(\"Please enter a name!\")\n    }else{\n      const dbRef = firebase.database().ref();\n    dbRef.push(this.state.userInput);\n    this.setState({userInput:''});\n    }\n  }\n\n  removeName = (nameId) => {\n    const dbRef = firebase.database().ref();\n    dbRef.child(nameId).remove()\n  }\n  \n  shuffle = (arr) => {\n      for (let i = arr.length - 1; i > 0; i--) {\n          const indexSwap = Math.floor(Math.random() * (i + 1));\n          const currentName = arr[i];\n          const nameSwap = arr[indexSwap];\n          arr[i] = nameSwap;\n          arr[indexSwap] = currentName;\n      };\n      return arr\n    }\n\n  randomize = () => {\n    const teamOnePlaceholder = [];\n    const teamTwoPlaceholder = [];\n    const copyOfNamesArray = [...this.state.namesArray];\n    const shuffledArray = this.shuffle(copyOfNamesArray);\n\n    shuffledArray.map((name, index) => {\n      if(index % 2 === 0){\n        teamOnePlaceholder.push(name);\n      }else\n      {\n      teamTwoPlaceholder.push(name);\n      }\n    });\n\n    if (teamOnePlaceholder.length === teamTwoPlaceholder.length){\n      this.setState({\n      teamOne: teamOnePlaceholder,\n      teamTwo: teamTwoPlaceholder,\n      isHidden: true,\n      })\n    } else {\n      alert(\"Please add an even number of players!\")\n    }\n    \n  };\n\n  \n  render(){\n    return (\n      <div className=\"App wrapper\">\n        <Header />\n        <main>\n          <div className=\"formbut\">\n            <form action=\"submit\">\n              <label htmlFor=\"userNames\"> Please type player names. </label>\n              <input \n                type=\"text\" \n                id=\"userNames\" \n                onChange={this.handleChange} \n                value={this.state.userInput}  \n              />\n              <button  type=\"submit\" onClick={this.handleClick}> Add a name! </button>\n            </form>\n            <button className=\"random\" type=\"submit\" onClick={this.randomize}>Randomize!</button>\n          </div>\n          <div className=\"userNames\">\n            <div className=\"name\">\n              <h3>Names</h3>\n              <div>\n                {this.state.namesArray.map((nameObject) => {\n                return (\n                  <div className=\"showName\" key={nameObject.key}> \n                    <p>{nameObject.name}</p>\n                    <button onClick={() => this.removeName(nameObject.key)}> Remove </button>\n                  </div>\n                )\n                })}\n              </div>\n            </div>\n            <div className=\"team1\">\n            {this.state.isHidden && <h3>Team 1</h3>}\n              {this.state.teamOne.map((nameObject) => {\n                return (\n                  <div className=\"teammates\" key={nameObject.key}> \n                      <p>{nameObject.name}</p>\n                  </div>\n                )\n                })}\n            </div>\n            <div className=\"team2\">\n            {this.state.isHidden && <h3>Team 2</h3>}\n              {this.state.teamTwo.map((nameObject) => {\n                return (\n                  <div className=\"teammates\" key={nameObject.key}> \n                    <p>{nameObject.name}</p>\n                  </div>\n                )\n                })}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  };\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}